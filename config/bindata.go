// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x49\x6f\xdb\x3c\x10\xbd\xf3\x57\x0c\xe4\xcb\xf7\x01\x8d\x22\x4b\x4e\xec\x0a\xf0\x21\x08\x72\x48\xd1\xb4\x40\x72\x34\x82\x62\x44\x8d\x25\xc2\x5c\x04\x92\x72\x96\x5f\x5f\x0c\xbd\x24\x6e\x73\x29\x10\xf9\x40\x93\x6f\x96\xf7\xde\x90\x13\xb8\x76\xc3\x8b\x57\x5d\x1f\xe1\x3f\xf9\x3f\x94\xc5\xb4\x82\x33\x5e\x16\xd0\x68\x94\x9b\xe8\x06\xf8\xe6\x42\x3f\x22\xdc\xa1\xb2\xf4\x05\xae\xb4\x86\x7b\x4e\x08\x70\x4f\x81\xfc\x96\xda\x5c\x4c\xe0\x81\x08\xbe\xdf\x5e\xdf\xfc\x78\xb8\x81\xb5\xf3\xa0\x95\x24\x1b\x08\x94\x5d\x3b\x6f\x30\x2a\x67\x73\x21\x26\x9f\xf3\x89\x09\xdc\x5d\x71\x37\xb8\x76\x76\xad\xba\xd1\xa7\x06\xf0\xef\x75\x3e\x89\x8f\x88\x2a\x6a\x82\x25\x64\x77\xc8\xca\xe1\x7e\xb4\x51\x19\x3a\xe5\x97\x89\x2d\xf9\xc0\x44\x97\x90\x6d\x8b\xbc\xca\xa7\xf3\x4c\x88\x15\x8e\xb1\x77\xfe\x51\x00\x58\x34\xa9\xca\xc1\xfb\x4c\x00\x38\xdf\xa1\x55\xaf\x3b\x85\xc7\x0e\xb7\x3f\x39\xf3\x89\x1a\x4e\x1b\xbd\x66\xa4\xc8\xd3\xaf\x5e\x14\x9c\x87\xad\x51\xf6\xd7\x1e\x9a\x96\xf3\x04\x4e\xeb\xaa\xaa\x2a\x4e\x25\x83\x4a\x73\x72\xef\x42\xe4\x90\x60\xe2\x90\xd3\x33\x9a\x41\x53\x2e\x9d\xe1\x1a\x83\xf3\x8c\x95\x17\xdc\x24\x90\xe7\x38\x5e\x99\x67\xc2\x31\x04\x3e\xe3\xf5\xc9\xf9\x96\x0b\xb7\x18\xb1\xc1\x40\xef\xf5\x98\xc4\xf9\x8c\x34\x86\xa8\x24\x67\x2a\x83\xdd\x3b\xe8\x7c\x0f\x05\x42\x2f\xfb\xfa\x32\x9f\x65\x6f\xba\xfa\x18\x87\xfa\xfc\x8f\x90\xaf\x65\x91\x64\x1e\xe8\x70\xe0\x81\x12\x53\x39\xee\x9d\x8f\xcc\x71\xc5\x09\xcc\x89\xe7\xe2\xc6\x24\xab\x10\x00\x64\xb1\xd1\xc4\xe1\xd1\x8f\x24\xc4\x6a\x54\x1f\x30\xdf\xa8\x06\x2d\x7e\x44\x7c\x87\x1c\x18\xa7\x07\x91\x6c\xd2\x4e\xa2\x66\x6f\x4f\x48\xcc\x66\xd5\xe3\x47\x4d\xc9\x6e\x95\x77\xd6\x90\x8d\x8c\xfb\x31\x8d\xba\xa5\x2d\x69\x37\xf0\x69\x72\xd6\xc9\x0d\xa5\x7b\x62\x50\xf6\xca\xd2\xd9\x29\xcb\x2c\x55\x6e\x07\xa7\x6c\x9a\x68\x94\x6c\xdb\x91\x48\x5d\x56\xf3\xcb\xec\xc4\x81\x69\xb2\xa0\x51\xb6\x0d\x6f\x65\xea\x73\x83\xfa\x09\x3d\xd5\xde\x71\xb8\x56\x76\x13\xfe\x9e\x62\x7d\x32\x0f\x0e\x94\xc3\x08\x4b\xb8\x28\xf6\x1f\xf3\x24\xe3\xfc\x0b\x1f\x96\xb3\x72\xb1\xe0\x43\xb1\xd2\xae\xeb\x76\x32\xd6\x4a\xd3\xa9\x84\x5c\xbb\x2e\x4b\x02\x9f\x83\x7a\x65\x60\x5a\xec\xb6\x3b\xd7\xab\xfd\xae\x41\xb9\x19\x07\x66\x35\x67\x86\x2c\x31\xbd\xb7\x25\xac\x51\x07\x76\x74\xf0\xee\xf9\xe5\xcd\xeb\x23\x02\xc0\xd7\xe9\x70\x3b\xf8\x7f\xd8\x6d\x7e\x07\x00\x00\xff\xff\x3c\xa6\x23\xc0\x0c\x05\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1292, mode: os.FileMode(420), modTime: time.Unix(1535763107, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

