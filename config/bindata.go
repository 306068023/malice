// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xc9\x6e\xdb\x30\x10\xbd\xf3\x2b\x06\xf2\xa5\x05\x1a\x59\x96\x9c\xc4\x11\xe0\x43\x10\xe4\x90\xa2\x69\x81\xe4\x68\x04\xc5\x48\x1a\x4b\x84\xb9\x08\x24\xe5\x2c\x5f\x5f\x0c\xbd\x24\x6a\x7d\x29\x10\xf9\x40\x93\x6f\x96\xf7\x1e\x87\x13\xb8\xb1\xfd\xab\x93\x6d\x17\xe0\x4b\xfd\x15\xf2\x6c\x56\xc0\x19\x2f\x0b\xa8\x14\xd6\x9b\x60\x7b\xf8\x6e\x7d\x37\x20\xdc\xa3\x34\xf4\x0d\xae\x95\x82\x07\x4e\xf0\xf0\x40\x9e\xdc\x96\x9a\x54\x4c\xe0\x91\x08\x7e\xdc\xdd\xdc\xfe\x7c\xbc\x85\xb5\x75\xa0\x64\x4d\xc6\x13\x48\xb3\xb6\x4e\x63\x90\xd6\xa4\x42\x4c\x3e\xe7\x13\x13\xb8\xbf\xe6\x6e\x70\x63\xcd\x5a\xb6\x83\x8b\x0d\xe0\xff\xeb\x7c\x12\x1f\x11\x64\x50\x04\x4b\x48\xee\x91\x95\xc3\xc3\x60\x82\xd4\x34\xe6\x97\x88\x2d\x39\xcf\x44\x97\x90\x6c\xb3\xb4\x48\x67\x57\x89\x10\x2b\x1c\x42\x67\xdd\x93\x00\x30\xa8\x63\x95\x83\xf7\x89\x00\xb0\xae\x45\x23\xdf\x76\x0a\x8f\x1d\xee\x7e\x71\xe6\x33\x55\x9c\x36\x38\xc5\x48\x96\xc6\x5f\xb9\xc8\x38\x0f\x1b\x2d\xcd\xef\x3d\x34\xcb\x2f\x23\x38\x2b\x8b\xa2\x28\x38\x95\x34\x4a\xc5\xc9\x9d\xf5\x81\x43\xbc\x0e\x7d\x4a\x2f\xa8\x7b\x45\x69\x6d\x35\xd7\xe8\xad\x63\x2c\x3f\xe7\x26\x9e\x1c\xc7\xf1\xca\x3c\x23\x8e\xde\xf3\x19\xaf\xcf\xd6\x35\x5c\xb8\xc1\x80\x15\x7a\xfa\xa8\x47\x47\xce\x67\xa4\xd0\x07\x59\x73\xa6\xd4\xd8\x7e\x80\xa6\x7b\xc8\x13\xba\xba\x2b\x2f\xd2\x79\xf2\xae\xab\x0b\xa1\x2f\xa7\x53\x65\x6b\x54\xcc\xb6\xbc\xca\xb3\x28\x71\xf2\x57\xc4\xb8\xc8\x21\xea\x40\x98\x03\x0f\xa4\x99\xec\x71\x6f\x5d\x60\x15\x2b\x4e\x60\xd6\x7c\x73\x76\x88\xc2\x33\x01\x40\x06\x2b\x45\x1c\x1e\xdc\x40\x42\xac\x06\x79\x42\xdb\x46\x56\x68\xf0\x94\xb4\x1d\x72\xd0\x14\x9f\x4c\x34\xf2\xa8\x67\x44\x62\x3e\x2f\x9e\x4e\x35\x25\xb3\x95\xce\x1a\x4d\x26\x30\xee\x86\x38\x0c\x0d\x6d\x49\xd9\x9e\x4f\xa3\xf7\xb6\xde\x50\x9c\x24\x8d\x75\x27\x0d\x9d\x8d\x59\x26\xb1\x72\xd3\x5b\x69\xe2\x9d\x87\x7a\x6c\x6c\x5e\x5c\x5e\x24\x23\x07\x66\xd1\x82\x4a\x9a\xc6\xbf\x97\x29\xa7\x1a\xd5\x33\x3a\x2a\x9d\xe5\x70\x25\xcd\xc6\xff\x7b\xcf\xe5\xe8\x3e\x38\xb0\xee\x07\x58\xc2\x79\xb6\xff\x98\x27\x69\xeb\x5e\xf9\x30\x9f\xe7\x8b\x05\x1f\x8a\x95\xb2\x6d\xbb\x93\xb1\x96\x8a\xc6\x12\x52\x65\xdb\x24\x0a\x7c\xf1\xf2\x8d\x81\x59\xb6\xdb\xee\x5c\x2f\xf6\xbb\x0a\xeb\xcd\xd0\x33\xab\x4b\x66\xc8\x12\xe3\x8b\x5c\xc2\x1a\x95\x67\x47\x7b\x67\x5f\x5e\xdf\xbd\x3e\x22\x00\x3c\x4e\x87\xe9\xe0\xff\x7e\xb7\xf9\x13\x00\x00\xff\xff\x77\xe1\xcd\x4c\x2e\x05\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1326, mode: os.FileMode(420), modTime: time.Unix(1535991835, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

