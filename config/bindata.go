// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xcb\x6e\xdb\x30\x10\xbc\xf3\x2b\x16\xf2\xa5\x05\x1a\x59\x96\x9c\xc4\x15\xe0\x43\x10\xe4\x90\xa2\x69\x81\xe4\x68\x04\xc5\x4a\x5a\x4b\x84\xf9\x10\x48\xca\x79\x7c\x7d\xb1\x94\xed\x44\x68\x2e\x05\x22\x1f\x68\x72\xf6\x31\x33\x5c\xce\xe0\xda\xf6\x2f\x4e\xb6\x5d\x80\x2f\xf5\x57\xc8\xb3\x45\x01\x67\xbc\xac\xa0\x52\x58\xef\x82\xed\xe1\x87\xf5\xdd\x80\x70\x87\xd2\xd0\x37\xb8\x52\x0a\xee\x39\xc1\xc3\x3d\x79\x72\x7b\x6a\x52\x31\x83\x07\x22\xf8\x79\x7b\x7d\xf3\xeb\xe1\x06\xb6\xd6\x81\x92\x35\x19\x4f\x20\xcd\xd6\x3a\x8d\x41\x5a\x93\x0a\x31\xfb\x9c\x4f\xcc\xe0\xee\x8a\xbb\xc1\xb5\x35\x5b\xd9\x0e\x2e\x36\x80\xff\xaf\xf3\x49\x7c\x44\x90\x41\x11\xac\x21\xb9\x43\x56\x0e\xf7\x83\x09\x52\xd3\x94\x5f\x22\xf6\xe4\x3c\x13\x5d\x43\xb2\xcf\xd2\x22\xcd\xb3\x44\x88\x0d\x0e\xa1\xb3\xee\x51\x00\x18\xd4\xb1\xca\xd1\xfb\x44\x00\x58\xd7\xa2\x91\xaf\xa3\xc2\x53\x87\xdb\xdf\x9c\xf9\x44\x15\xa7\x0d\x4e\x31\x92\xa5\xf1\x57\xae\x32\xce\xc3\x46\x4b\xf3\xe7\x00\x2d\xf2\xcb\x08\x2e\xca\xa2\x28\x0a\x4e\x25\x8d\x52\x71\x72\x67\x7d\xe0\x10\xaf\x43\x9f\xd2\x33\xea\x5e\x51\x5a\x5b\xcd\x35\x7a\xeb\x18\xcb\xcf\xb9\x89\x27\xc7\x71\xbc\x32\xcf\x88\xa3\xf7\x7c\xc6\xeb\x93\x75\x0d\x17\x6e\x30\x60\x85\x9e\xde\xeb\xd1\x91\xf3\x19\x29\xf4\x41\xd6\x9c\x29\x35\xb6\xef\xa0\xf9\x01\xf2\x84\xae\xee\xca\x8b\x74\xc9\x41\xb3\xa3\xb2\x2e\x84\xbe\x9c\xcf\x95\xad\x51\x31\xdf\xf2\x7b\x9e\x45\x91\x53\x7c\x5a\xe4\x14\x73\x20\xcc\x81\x47\xd2\x4c\xf6\xb4\xb7\x2e\xb0\x8a\x0d\x27\x30\x6b\xbe\x39\x3b\x44\xe1\x99\x00\x20\x83\x95\x22\x0e\x0f\x6e\x20\x21\x36\x83\xfc\x40\xdb\x4e\x56\x68\xf0\x23\x69\x23\x72\xd4\x14\x9f\x4c\x34\xf2\xa4\x66\x42\x62\xb9\x2c\x1e\x3f\x6a\x4a\x66\x2f\x9d\x35\x9a\x4c\x60\xdc\x0d\x71\x18\x1a\xda\x93\xb2\x3d\x9f\x46\xef\x6d\xbd\xa3\x38\x49\x1a\xeb\x4e\x1a\x3a\x9b\xb2\x4c\x62\xe5\xa6\xb7\xd2\xc4\x3b\x0f\xf5\xd4\xd6\xbc\xb8\xbc\x48\x26\x0e\x2c\xa2\x05\x95\x34\x8d\x7f\x2b\x53\xce\x35\xaa\x27\x74\x54\x3a\xcb\xe1\x4a\x9a\x9d\xff\xf7\x9e\xcb\xc9\x7d\x70\x60\xdd\x0f\xb0\x86\xf3\xec\xf0\x31\x4f\xd2\xd6\xbd\xf0\x61\xbe\xcc\x57\x2b\x3e\x14\x1b\x65\xdb\x76\x94\xb1\x95\x8a\xa6\x12\x52\x65\xdb\x24\x0a\x7c\xf6\xf2\x95\x81\x45\x36\x6e\x47\xd7\x8b\xc3\xae\xc2\x7a\x37\xf4\xcc\xea\x92\x19\xb2\xc4\xf8\x22\xd7\xb0\x45\xe5\xd9\xd1\xde\xd9\xe7\x97\x37\xaf\x4f\x08\x00\x8f\xd3\x71\x3a\xf8\xbf\x1f\x37\x7f\x03\x00\x00\xff\xff\x09\x22\xea\x9c\x2e\x05\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1326, mode: os.FileMode(420), modTime: time.Unix(1536003338, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

