// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x4b\x6f\xdb\x3c\x10\xbc\xf3\x57\x2c\xe4\xcb\xf7\x01\x8d\x2c\x4b\x4e\xe2\x0a\xf0\x21\x08\x72\x48\xd1\xb4\x40\x72\x34\x82\x62\x25\xad\x25\xc2\x7c\x08\x24\xe5\x3c\x7e\x7d\xb1\xb4\xe5\x44\x6d\x2e\x05\x22\x1f\x68\x72\xf6\x31\x33\x5c\xce\xe0\xda\xf6\x2f\x4e\xb6\x5d\x80\xff\xea\xff\x21\xcf\x16\x05\x9c\xf1\xb2\x82\x4a\x61\xbd\x0b\xb6\x87\x6f\xd6\x77\x03\xc2\x1d\x4a\x43\x5f\xe0\x4a\x29\xb8\xe7\x04\x0f\xf7\xe4\xc9\xed\xa9\x49\xc5\x0c\x1e\x88\xe0\xfb\xed\xf5\xcd\x8f\x87\x1b\xd8\x5a\x07\x4a\xd6\x64\x3c\x81\x34\x5b\xeb\x34\x06\x69\x4d\x2a\xc4\xec\x73\x3e\x31\x83\xbb\x2b\xee\x06\xd7\xd6\x6c\x65\x3b\xb8\xd8\x00\xfe\xbd\xce\x27\xf1\x11\x41\x06\x45\xb0\x86\xe4\x0e\x59\x39\xdc\x0f\x26\x48\x4d\x53\x7e\x89\xd8\x93\xf3\x4c\x74\x0d\xc9\x3e\x4b\x8b\x34\x2f\x12\x21\x36\x38\x84\xce\xba\x47\x01\x60\x50\xc7\x2a\xa3\xf7\x89\x00\xb0\xae\x45\x23\x5f\x0f\x0a\x4f\x1d\x6e\x7f\x72\xe6\x13\x55\x9c\x36\x38\xc5\x48\x96\xc6\x5f\xb9\xca\x38\x0f\x1b\x2d\xcd\xaf\x23\xb4\xc8\x2f\x23\xb8\x28\x8b\xa2\x88\x4d\x49\xa3\x54\x9c\xdc\x59\x1f\x38\xc4\xeb\xd0\xa7\xf4\x8c\xba\x57\x94\xd6\x56\x73\x8d\xde\x3a\xc6\xf2\x73\x6e\xe2\xc9\x71\x1c\xaf\xcc\x33\xe2\xe8\x3d\x9f\xf1\xfa\x64\x5d\xc3\x85\x1b\x0c\x58\xa1\xa7\xf7\x7a\x74\xe4\x7c\x46\x0a\x7d\x90\x35\x67\x4a\x8d\xed\x3b\x68\x7e\x84\x3c\xa1\xab\xbb\xf2\x22\x5d\x26\x6f\xba\xba\x10\xfa\x72\x3e\x57\xb6\x46\xc5\x6c\xcb\xaf\x79\x16\x25\xce\xfe\x88\x98\x16\x19\xa3\x46\xc2\x1c\x38\x92\x66\xb2\xa7\xbd\x75\x81\x55\x6c\x38\x81\x59\xf3\xcd\xd9\x21\x0a\xcf\x04\x00\x19\xac\x14\x71\x78\x70\x03\x09\xb1\x19\xe4\x07\xda\x76\xb2\x42\x83\x1f\x49\x3b\x20\xa3\xa6\xf8\x64\xa2\x91\x27\x3d\x13\x12\xcb\x65\xf1\xf8\x51\x53\x32\x7b\xe9\xac\xd1\x64\x02\xe3\x6e\x88\xc3\xd0\xd0\x9e\x94\xed\xf9\x34\x7a\x6f\xeb\x1d\xc5\x49\xd2\x58\x77\xd2\xd0\xd9\x94\x65\x12\x2b\x37\xbd\x95\x26\xde\x79\xa8\xa7\xc6\xe6\xc5\xe5\x45\x32\x71\x60\x11\x2d\xa8\xa4\x69\xfc\x5b\x99\x72\xae\x51\x3d\xa1\xa3\xd2\x59\x0e\x57\xd2\xec\xfc\xdf\xf7\x5c\x4e\xee\x83\x03\xeb\x7e\x80\x35\x9c\x67\xc7\x8f\x79\x92\xb6\xee\x85\x0f\xf3\x65\xbe\x5a\xf1\xa1\xd8\x28\xdb\xb6\x07\x19\x5b\xa9\x68\x2a\x21\x55\xb6\x4d\xa2\xc0\x67\x2f\x5f\x19\x58\x64\x87\xed\xc1\xf5\xe2\xb8\xab\xb0\xde\x0d\x3d\xb3\xba\x64\x86\x2c\x31\xbe\xc8\x35\x6c\x51\x79\x76\xb4\x77\xf6\xf9\xe5\xcd\xeb\x13\x02\xc0\xe3\x34\x4e\x07\xff\xf7\x87\xcd\xef\x00\x00\x00\xff\xff\x6d\xba\xfa\xef\x2e\x05\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1326, mode: os.FileMode(420), modTime: time.Unix(1536459361, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

