// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x49\x6f\xdb\x3c\x10\xbd\xf3\x57\x0c\xe4\xcb\xf7\x01\x8d\x2c\x4b\x59\x5c\x01\x3e\x04\x41\x0e\x29\x9a\x16\x48\x8e\x46\x50\x8c\xa4\xb1\x44\x98\x8b\x40\x52\xce\xf2\xeb\x8b\xa1\x2d\x27\x6a\x7d\x29\x10\xf9\x40\x93\x6f\x96\xf7\x1e\x87\x33\xb8\xb1\xfd\xab\x93\x6d\x17\xe0\xbf\xfa\x7f\xc8\xb3\x45\x01\x67\xbc\x2c\xa1\x52\x58\x6f\x83\xed\xe1\x9b\xf5\xdd\x80\x70\x8f\xd2\xd0\x17\xb8\x56\x0a\x1e\x38\xc1\xc3\x03\x79\x72\x3b\x6a\x52\x31\x83\x47\x22\xf8\x7e\x77\x73\xfb\xe3\xf1\x16\x36\xd6\x81\x92\x35\x19\x4f\x20\xcd\xc6\x3a\x8d\x41\x5a\x93\x0a\x31\xfb\x9c\x4f\xcc\xe0\xfe\x9a\xbb\xc1\x8d\x35\x1b\xd9\x0e\x2e\x36\x80\x7f\xaf\xf3\x49\x7c\x44\x90\x41\x11\xac\x20\xb9\x47\x56\x0e\x0f\x83\x09\x52\xd3\x94\x5f\x22\x76\xe4\x3c\x13\x5d\x41\xb2\xcb\xd2\x22\xcd\x97\x89\x10\x6b\x1c\x42\x67\xdd\x93\x00\x30\xa8\x63\x95\xd1\xfb\x44\x00\x58\xd7\xa2\x91\x6f\x7b\x85\xc7\x0e\x77\x3f\x39\xf3\x99\x2a\x4e\x1b\x9c\x62\x24\x4b\xe3\xaf\x5c\x66\x9c\x87\x8d\x96\xe6\xd7\x01\x5a\xe4\x57\x11\x5c\x94\x45\x51\x14\x9c\x4a\x1a\xa5\xe2\xe4\xce\xfa\xc0\x21\x5e\x87\x3e\xa5\x17\xd4\xbd\xa2\xb4\xb6\x9a\x6b\xf4\xd6\x31\x96\x5f\x70\x13\x4f\x8e\xe3\x78\x65\x9e\x11\x47\xef\xf9\x8c\xd7\x67\xeb\x1a\x2e\xdc\x60\xc0\x0a\x3d\x7d\xd4\xa3\x23\xe7\x33\x52\xe8\x83\xac\x39\x53\x6a\x6c\x3f\x40\xf3\x03\xe4\x09\x5d\xdd\x95\x97\xe9\x45\xf2\xae\xab\x0b\xa1\x2f\xe7\x73\x65\x6b\x54\xcc\xb6\xfc\x9a\x67\x51\xe2\xec\x8f\x88\x69\x91\x31\x6a\x24\xcc\x81\x23\x69\x26\x7b\xdc\x5b\x17\x58\xc5\x9a\x13\x98\x35\xdf\x9c\x1d\xa2\xf0\x4c\x00\x90\xc1\x4a\x11\x87\x07\x37\x90\x10\xeb\x41\x9e\xd0\xb6\x95\x15\x1a\x3c\x25\x6d\x8f\x8c\x9a\xe2\x93\x89\x46\x1e\xf5\x4c\x48\x9c\x9f\x17\x4f\xa7\x9a\x92\xd9\x49\x67\x8d\x26\x13\x18\x77\x43\x1c\x86\x86\x76\xa4\x6c\xcf\xa7\xd1\x7b\x5b\x6f\x29\x4e\x92\xc6\xba\x93\x86\xce\xa6\x2c\x93\x58\xb9\xe9\xad\x34\xf1\xce\x43\x3d\x35\x36\x2f\xae\x2e\x93\x89\x03\x8b\x68\x41\x25\x4d\xe3\xdf\xcb\x94\x73\x8d\xea\x19\x1d\x95\xce\x72\xb8\x92\x66\xeb\xff\xbe\xe7\x72\x72\x1f\x1c\x58\xf7\x03\xac\xe0\x22\x3b\x7c\xcc\x93\xb4\x75\xaf\x7c\x98\x9f\xe7\xcb\x25\x1f\x8a\xb5\xb2\x6d\xbb\x97\xb1\x91\x8a\xa6\x12\x52\x65\xdb\x24\x0a\x7c\xf1\xf2\x8d\x81\x45\xb6\xdf\xee\x5d\x2f\x0e\xbb\x0a\xeb\xed\xd0\x33\xab\x2b\x66\xc8\x12\xe3\x8b\x5c\xc1\x06\x95\x67\x47\x7b\x67\x5f\x5e\xdf\xbd\x3e\x22\x00\x3c\x4e\xe3\x74\xf0\x7f\xbf\xdf\xfc\x0e\x00\x00\xff\xff\xb4\xc7\xe8\x56\x2e\x05\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1326, mode: os.FileMode(420), modTime: time.Unix(1543725028, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

