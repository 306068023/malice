// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x4b\x6f\xdb\x3c\x10\xbc\xf3\x57\x2c\xe4\xcb\xf7\x01\x8d\x2c\x4b\x4e\xe2\x0a\xf0\x21\x08\x72\x48\xd1\xb4\x40\x72\x34\x82\x62\x25\xad\x25\xc2\x7c\x08\x24\xe5\x3c\x7e\x7d\xb1\xb4\xe5\x44\x6d\x2e\x05\x22\x1f\x68\x72\xf6\x31\x33\x5c\xce\xe0\xda\xf6\x2f\x4e\xb6\x5d\x80\xff\xea\xff\x21\xcf\x16\x05\x9c\xf1\xb2\x82\x4a\x61\xbd\x0b\xb6\x87\x6f\xd6\x77\x03\xc2\x1d\x4a\x43\x5f\xe0\x4a\x29\xb8\xe7\x04\x0f\xf7\xe4\xc9\xed\xa9\x49\xc5\x0c\x1e\x88\xe0\xfb\xed\xf5\xcd\x8f\x87\x1b\xd8\x5a\x07\x4a\xd6\x64\x3c\x81\x34\x5b\xeb\x34\x06\x69\x4d\x2a\xc4\xec\x73\x3e\x31\x83\xbb\x2b\xee\x06\xd7\xd6\x6c\x65\x3b\xb8\xd8\x00\xfe\xbd\xce\x27\xf1\x11\x41\x06\x45\xb0\x86\xe4\x0e\x59\x39\xdc\x0f\x26\x48\x4d\x53\x7e\x89\xd8\x93\xf3\x4c\x74\x0d\xc9\x3e\x4b\x8b\x34\x3f\x4f\x84\xd8\xe0\x10\x3a\xeb\x1e\x05\x80\x41\x1d\xab\x8c\xde\x27\x02\xc0\xba\x16\x8d\x7c\x3d\x28\x3c\x75\xb8\xfd\xc9\x99\x4f\x54\x71\xda\xe0\x14\x23\x59\x1a\x7f\xe5\x2a\xe3\x3c\x6c\xb4\x34\xbf\x8e\xd0\x22\xbf\x8c\xe0\xa2\x2c\x8a\xa2\xe0\x54\xd2\x28\x15\x27\x77\xd6\x07\x0e\xf1\x3a\xf4\x29\x3d\xa3\xee\x15\xa5\xb5\xd5\x5c\xa3\xb7\x8e\xb1\xfc\x9c\x9b\x78\x72\x1c\xc7\x2b\xf3\x8c\x38\x7a\xcf\x67\xbc\x3e\x59\xd7\x70\xe1\x06\x03\x56\xe8\xe9\xbd\x1e\x1d\x39\x9f\x91\x42\x1f\x64\xcd\x99\x52\x63\xfb\x0e\x9a\x1f\x21\x4f\xe8\xea\xae\xbc\x48\x97\xc9\x9b\xae\x2e\x84\xbe\x9c\xcf\x95\xad\x51\x31\xdb\xf2\x6b\x9e\x45\x89\xb3\x3f\x22\xa6\x45\xc6\xa8\x91\x30\x07\x8e\xa4\x99\xec\x69\x6f\x5d\x60\x15\x1b\x4e\x60\xd6\x7c\x73\x76\x88\xc2\x33\x01\x40\x06\x2b\x45\x1c\x1e\xdc\x40\x42\x6c\x06\xf9\x81\xb6\x9d\xac\xd0\xe0\x47\xd2\x0e\xc8\xa8\x29\x3e\x99\x68\xe4\x49\xcf\x84\xc4\x72\x59\x3c\x7e\xd4\x94\xcc\x5e\x3a\x6b\x34\x99\xc0\xb8\x1b\xe2\x30\x34\xb4\x27\x65\x7b\x3e\x8d\xde\xdb\x7a\x47\x71\x92\x34\xd6\x9d\x34\x74\x36\x65\x99\xc4\xca\x4d\x6f\xa5\x89\x77\x1e\xea\xa9\xb1\x79\x71\x79\x91\x4c\x1c\x58\x44\x0b\x2a\x69\x1a\xff\x56\xa6\x9c\x6b\x54\x4f\xe8\xa8\x74\x96\xc3\x95\x34\x3b\xff\xf7\x3d\x97\x93\xfb\xe0\xc0\xba\x1f\x60\x0d\xe7\xd9\xf1\x63\x9e\xa4\xad\x7b\xe1\xc3\x7c\x99\xaf\x56\x7c\x28\x36\xca\xb6\xed\x41\xc6\x56\x2a\x9a\x4a\x48\x95\x6d\x93\x28\xf0\xd9\xcb\x57\x06\x16\xd9\x61\x7b\x70\xbd\x38\xee\x2a\xac\x77\x43\xcf\xac\x2e\x99\x21\x4b\x8c\x2f\x72\x0d\x5b\x54\x9e\x1d\xed\x9d\x7d\x7e\x79\xf3\xfa\x84\x00\xf0\x38\x8d\xd3\xc1\xff\xfd\x61\xf3\x3b\x00\x00\xff\xff\x21\x9d\x92\x9b\x2e\x05\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1326, mode: os.FileMode(420), modTime: time.Unix(1543028389, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

