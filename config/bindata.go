// Code generated by go-bindata.
// sources:
// config/config.toml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x49\x6f\xdb\x3c\x10\xbd\xf3\x57\x0c\xe4\xcb\xf7\x01\x8d\x2c\x4b\x59\x5c\x01\x3e\x04\x41\x0e\x29\x9a\x16\x48\x8e\x46\x50\x8c\xa4\xb1\x44\x98\x8b\x40\x52\xce\xf2\xeb\x8b\xa1\x2d\x27\x6a\x7d\x29\x10\xf9\x40\x93\x6f\x96\xf7\x1e\x87\x33\xb8\xb1\xfd\xab\x93\x6d\x17\xe0\xbf\xfa\x7f\xc8\xb3\x45\x01\x67\xbc\x2c\xa1\x52\x58\x6f\x83\xed\xe1\x9b\xf5\xdd\x80\x70\x8f\xd2\xd0\x17\xb8\x56\x0a\x1e\x38\xc1\xc3\x03\x79\x72\x3b\x6a\x52\x31\x83\x47\x22\xf8\x7e\x77\x73\xfb\xe3\xf1\x16\x36\xd6\x81\x92\x35\x19\x4f\x20\xcd\xc6\x3a\x8d\x41\x5a\x93\x0a\x31\xfb\x9c\x4f\xcc\xe0\xfe\x9a\xbb\xc1\x8d\x35\x1b\xd9\x0e\x2e\x36\x80\x7f\xaf\xf3\x49\x7c\x44\x90\x41\x11\xac\x20\xb9\x47\x56\x0e\x0f\x83\x09\x52\xd3\x94\x5f\x22\x76\xe4\x3c\x13\x5d\x41\xb2\xcb\xd2\x22\xcd\x2f\x13\x21\xd6\x38\x84\xce\xba\x27\x01\x60\x50\xc7\x2a\xa3\xf7\x89\x00\xb0\xae\x45\x23\xdf\xf6\x0a\x8f\x1d\xee\x7e\x72\xe6\x33\x55\x9c\x36\x38\xc5\x48\x96\xc6\x5f\xb9\xcc\x38\x0f\x1b\x2d\xcd\xaf\x03\xb4\xc8\xaf\x22\xb8\x28\x8b\xa2\x28\x38\x95\x34\x4a\xc5\xc9\x9d\xf5\x81\x43\xbc\x0e\x7d\x4a\x2f\xa8\x7b\x45\x69\x6d\x35\xd7\xe8\xad\x63\x2c\xbf\xe0\x26\x9e\x1c\xc7\xf1\xca\x3c\x23\x8e\xde\xf3\x19\xaf\xcf\xd6\x35\x5c\xb8\xc1\x80\x15\x7a\xfa\xa8\x47\x47\xce\x67\xa4\xd0\x07\x59\x73\xa6\xd4\xd8\x7e\x80\xe6\x07\xc8\x13\xba\xba\x2b\x2f\xd3\x8b\xe4\x5d\x57\x17\x42\x5f\xce\xe7\xca\xd6\xa8\x98\x6d\xf9\x35\xcf\xa2\xc4\xd9\x1f\x11\xd3\x22\x63\xd4\x48\x98\x03\x47\xd2\x4c\xf6\xb8\xb7\x2e\xb0\x8a\x35\x27\x30\x6b\xbe\x39\x3b\x44\xe1\x99\x00\x20\x83\x95\x22\x0e\x0f\x6e\x20\x21\xd6\x83\x3c\xa1\x6d\x2b\x2b\x34\x78\x4a\xda\x1e\x19\x35\xc5\x27\x13\x8d\x3c\xea\x99\x90\x38\x3f\x2f\x9e\x4e\x35\x25\xb3\x93\xce\x1a\x4d\x26\x30\xee\x86\x38\x0c\x0d\xed\x48\xd9\x9e\x4f\xa3\xf7\xb6\xde\x52\x9c\x24\x8d\x75\x27\x0d\x9d\x4d\x59\x26\xb1\x72\xd3\x5b\x69\xe2\x9d\x87\x7a\x6a\x6c\x5e\x5c\x5d\x26\x13\x07\x16\xd1\x82\x4a\x9a\xc6\xbf\x97\x29\xe7\x1a\xd5\x33\x3a\x2a\x9d\xe5\x70\x25\xcd\xd6\xff\x7d\xcf\xe5\xe4\x3e\x38\xb0\xee\x07\x58\xc1\x45\x76\xf8\x98\x27\x69\xeb\x5e\xf9\x30\x3f\xcf\x97\x4b\x3e\x14\x6b\x65\xdb\x76\x2f\x63\x23\x15\x4d\x25\xa4\xca\xb6\x49\x14\xf8\xe2\xe5\x1b\x03\x8b\x6c\xbf\xdd\xbb\x5e\x1c\x76\x15\xd6\xdb\xa1\x67\x56\x57\xcc\x90\x25\xc6\x17\xb9\x82\x0d\x2a\xcf\x8e\xf6\xce\xbe\xbc\xbe\x7b\x7d\x44\x00\x78\x9c\xc6\xe9\xe0\xff\x7e\xbf\xf9\x1d\x00\x00\xff\xff\xe8\x6b\x1f\x92\x2e\x05\x00\x00")

func configConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_configConfigToml,
		"config/config.toml",
	)
}

func configConfigToml() (*asset, error) {
	bytes, err := configConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.toml", size: 1326, mode: os.FileMode(420), modTime: time.Unix(1543033289, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.toml": configConfigToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.toml": &bintree{configConfigToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

